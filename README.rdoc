=== Summary

This is a fork of the Watchr gem at git://github.com/mynyml/watchr.git.

The are a number of differences. It's been ported to EventMachine for
file-events and has some extensions for how watches can be written.

== EventMachine

Not much to say. It supports EM as well as Rev. The default is still
Rev. To use EventMachine, after you install the EM gem, I just add

     begin; require 'watchr/event_handlers/em'; rescue LoadError; end

to my <tt>watchr.cnf</tt>. There may be better ways to do this.

=== Event processing extensions

I made several changes to the way events are created/processed, mostly to make my watchr.cnf work:

  #!/usr/bin/env watchr

  begin; require 'watchr/event_handlers/em'; rescue LoadError; end

  watch( %r(.*), :modified, lambda { |md| File.directory? md[0] } ) do |md|
    raise Watchr::Refresh
  end

  watch( %r((public/.*)\.haml$), [ :created, :modified ] ) do |md|
    cmd = "rm -f #{md[1]}.html && haml -f html5 #{md[0]} #{md[1]}.html && chmod 444 #{md[1]}.html"
    puts cmd
    system cmd
    if  $?.signaled? && $?.termsig == 2
      Process.kill 2, 0
    end
  end

  watch( %r((spec/.*[Ss]pec)\.(html|js)$), [ :load, :created, :modified ] ) do |md|
    cmd = "jazrb #{md[0]}"
    puts cmd
  end

The purpose of the first watch is to cause watchr to refresh when
directories change. This allows new files to be picked up.  The watch
pattern matches all files in the current directory tree (though not
<tt>.</tt> itself), and watches for :modified events. It adds an extra
lambda that is processed while looking at file paths: only directories
will get watches put on them. (Otherwise .* would put watches on every
file/directory in the tree, which seems kinda bad.

The second watch looks for HAML files in my public directory and
automatically converts them to HTML. These are static files, not
served by an app server like Rails, but even with static files, I
hate writing raw HTML. The extension here is that instead of a single
event type, I can pass an array. In addition to the :modified, event,
this will get called when watchr notes that a new file of this type
has appeared. (Note this works starting from watchr's first pass;
files created while watchr wasn't running don't count).

Then final watch looks for javascript and html spec files and runs
them under jazrb (see http://github.com/smparkes/jazrb if
interested). This case is similar to the previous but also adds the
<tt>:load</tt> event. This event gets fired the first time a file is
seen after watchr starts. This allows watchr to run all the specs when
first started, similar to what autotest does.

=== Things to do

# Batch up specs instead of running them individually (not a big deal
  for jazrb and haml; a big detail for rspec

# Integrate upstream (?)

# Move directory watch into watchr itself

# Handle interrupt processing more systematically